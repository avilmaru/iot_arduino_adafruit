#include "arduino_secrets.h"
/* 
   Sketch generated by the Arduino IoT Cloud Thing "Environmental_Sensors"
   https://create.arduino.cc/cloud/things/c8d546ba-c356-42af-91d7-4b9e4c0e80a7 

  Arduino IoT Cloud Properties description

  The following variables are automatically generated and updated when changes are made to the Thing properties

  bool ON_OFF;

  Properties which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

////////////////////////////////
#include <ArduinoGraphics.h> // Arduino_MKRRGB depends on ArduinoGraphics
#include <Arduino_MKRRGB.h>

////////////////////////////////

int debug = 0;
int state = 2;

void setup() {
  
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
    // initialize the display
  MATRIX.begin();

  // set the brightness, supported values are 0 - 255
  MATRIX.brightness(200);
  
   // configure the text scroll speed
  MATRIX.textScrollSpeed(125);

  MATRIX.clear();
  MATRIX.endDraw();
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

}

void loop() {

  ArduinoCloud.update();  
  if (state == 1) 
  {
    MATRIX.clear();
    MATRIX.endDraw();
    MATRIX.beginText(0, 0, 0, 127, 0); // X, Y, then R, G, B
    MATRIX.print(" ON");
    MATRIX.endText(SCROLL_LEFT);
    
  }else if (state == 0) {
    MATRIX.clear();
    MATRIX.endDraw();
    MATRIX.beginText(0, 0, 127, 0, 0); // X, Y, then R, G, B
    MATRIX.print(" OFF");
    MATRIX.endText(SCROLL_LEFT);
  }else{
    MATRIX.clear(); 
    MATRIX.endDraw();
  }
   
  
   Serial.println(state);
}

void onONOFFChange() {

  if (ON_OFF == true)
    state = 1;
  else
    state = 0;
    
}
